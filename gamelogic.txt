Game Flow

Start:
Create table (sb,bb,ante,num seats etc)
Set players at seats
Get sb position(players, lastSmalll, lastBig)  //returns ordered players

    Set missed bb and sb
        check if guy in bb last hand is in sb this hand, if so, no one has
        missed the bb....

        else set sb position to none

        else set every player from the person who was bb to the beginning of
        the list ind[0] to missed bb....

        if the guy who was the bb is MIA, the guy who was utg should be in ind[0]
        and he will pay bb this round, pay normal sb next hand...


        if the guy who was bb last hand is in player order, and he is not in sb
        ind[0], then everyone with a lower indice then him sets missed_bb...


        if the guy who was sb last hand is not in the button this hand, anyone
        further up the list than him as a missed sb....

        if there is anyone between the current sb and the former sb, they missed
        the sb
        if last_order[0] is None, there are no missed sb
        if last hand first pos was None,


        if you were not in last hand and have missed a blind
        check

    Edge logic for missed blinds etc...
Missed blind corner cases
Collect sb,bb,ante (and missed blinds)

Create pot
put in players list
Collect ante
any equity larger than the bb gets knocked off p.equity and added to amount
sb does not get collected
Set_player_table_attributes()
Create_deck()
Deal Hole cards()
    deal hole cards
ActionTime()



ActionTime(table):
Check for end case
    If active players is 1 AND only 1 Pot
        Award Pot to player

    IF active player is 1 AND more than 1 Pot
        Deal remaining community cards
        analyzer

    IF comm_cards equal 5
        analyzer
Deal
if comm cards == 0
deal 3
else:
deal 1
action()

First Bettor acts (if comm==0 ind[2] else ind[0]) //
Other players act
if played is true // end round logic

        Create Pot from side pots
    ...etc



Head to Head


player_order = [0,1,2,3,4]

action_time(table, inc):
    pot = table.pots[-1]
    if pot.players[inc].acted == False and pot.player[inc].stack > 0:
        pot.players[inc].action = True
    elif table.current_bet > pot.players[inc].equity and pot.player[inc].stack > 0:
        pot.players[inc].action = True
    else:
        evaluate_pot(table)



evaluate_pot(table):
    pot = table.pots[-1]
    if pot.side_pots:
        sorted(pot.side_pots)
        while pot.side_pots:

            amount = pot.side_pots.pop(0)
            x = 0
            new_players = []
            for player in pot.players:
                player.equity -= amount
                x += 1
                new_players.append(player)
            amount = amount * x
